/**
 * Huffman Decoding
 *
 * You are given an encoded binary string and a Huffman MinHeap tree, your task is to complete
 * the function decodeHuffmanData(), which decodes the binary encoded string and returns the
 * original string.
 *
 * Note: Each node of the min heap contains 2 data members, a character, and an integer to denoting
 * its frequency. The character '$' is the special character used for internal nodes whose min heap
 * node only needs an integer field. The code in the chart is generated by the following rule:
 *
 * - If we want to reach a node from the root then in the path, for right turn we use 1 and for left turn we use 0.
 *
 * Difficulty: Hard
 * https://www.geeksforgeeks.org/problems/huffman-decoding/1
 */

#include <iostream>
#include <string>

using namespace std;

struct MinHeapNode
{
    char data;
    int freq;
    MinHeapNode *left, *right;

    MinHeapNode(char data, int freq)
    {
        left = right = NULL;
        this->data = data;
        this->freq = freq;
    }
};

class Solution
{
public:

    string decodeHuffmanData(struct MinHeapNode *root, string binaryString)
    {
        string result = "";
        struct MinHeapNode *current = root;

        for (int i = 0; i < binaryString.size(); i++)
        {
            if (binaryString[i] == '0')
                current = current->left;
            else
                current = current->right;

            if (current->data != '$')
            {
                result += current->data;
                current = root;
            }
        }
        return result;
    }
};